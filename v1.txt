import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;

public class MinesweeperGame extends JFrame {

    private static final int BEGINNER_ROWS = 6;
    private static final int BEGINNER_COLS = 9;
    private static final int BEGINNER_MINES = 11;

    private static final int INTERMEDIATE_ROWS = 12;
    private static final int INTERMEDIATE_COLS = 18;
    private static final int INTERMEDIATE_MINES = 36;

    private static final int ADVANCED_ROWS = 21;
    private static final int ADVANCED_COLS = 26;
    private static final int ADVANCED_MINES = 92;

    private int rows;
    private int cols;
    private int numMines;

    private JButton[][] buttons;
    private boolean[][] isMine;
    private boolean[][] isRevealed;

    public MinesweeperGame() {
        initializeGame(BEGINNER_ROWS, BEGINNER_COLS, BEGINNER_MINES);
        initializeGUI();
    }

    private void initializeGame(int rows, int cols, int numMines) {
        this.rows = rows;
        this.cols = cols;
        this.numMines = numMines;

        buttons = new JButton[rows][cols];
        isMine = new boolean[rows][cols];
        isRevealed = new boolean[rows][cols];

        placeMines();
        calculateAdjacentMines();
    }

    private void initializeGUI() {
        setTitle("Minesweeper");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new GridLayout(rows, cols));

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                buttons[i][j] = new JButton();
                buttons[i][j].setMargin(new Insets(0, 0, 0, 0));
                buttons[i][j].addActionListener(new ButtonClickListener(i, j));
                add(buttons[i][j]);
            }
        }

        setSize(600, 400);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void placeMines() {
        Random random = new Random();
        int minesPlaced = 0;

        while (minesPlaced < numMines) {
            int row = random.nextInt(rows);
            int col = random.nextInt(cols);

            if (!isMine[row][col]) {
                isMine[row][col] = true;
                minesPlaced++;
            }
        }
    }

    private void calculateAdjacentMines() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (!isMine[i][j]) {
                    int count = countAdjacentMines(i, j);
                    buttons[i][j].setText(count > 0 ? String.valueOf(count) : "");
                }
            }
        }
    }

    private int countAdjacentMines(int row, int col) {
        int count = 0;

        for (int i = Math.max(0, row - 1); i <= Math.min(rows - 1, row + 1); i++) {
            for (int j = Math.max(0, col - 1); j <= Math.min(cols - 1, col + 1); j++) {
                if (isMine[i][j]) {
                    count++;
                }
            }
        }

        return count;
    }

    private void revealCell(int row, int col) {
        if (row < 0 || row >= rows || col < 0 || col >= cols || isRevealed[row][col]) {
            return;
        }

        isRevealed[row][col] = true;
        buttons[row][col].setEnabled(false);

        if (isMine[row][col]) {
            // Game over
            JOptionPane.showMessageDialog(this, "Game Over! You hit a mine.");
            resetGame();
        } else {
            // Check for win
            boolean win = true;
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < cols; j++) {
                    if (!isMine[i][j] && !isRevealed[i][j]) {
                        win = false;
                        break;
                    }
                }
            }

            if (win) {
                JOptionPane.showMessageDialog(this, "Congratulations! You won!");
                resetGame();
            } else {
                // Continue revealing adjacent cells if the current cell has no adjacent mines
                if (countAdjacentMines(row, col) == 0) {
                    for (int i = Math.max(0, row - 1); i <= Math.min(rows - 1, row + 1); i++) {
                        for (int j = Math.max(0, col - 1); j <= Math.min(cols - 1, col + 1); j++) {
                            revealCell(i, j);
                        }
                    }
                }
            }
        }
    }

    private void resetGame() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                buttons[i][j].setText("");
                buttons[i][j].setEnabled(true);
                isMine[i][j] = false;
                isRevealed[i][j] = false;
            }
        }

        placeMines();
        calculateAdjacentMines();
    }

    private class ButtonClickListener implements ActionListener {
        private final int row;
        private final int col;

        public ButtonClickListener(int row, int col) {
            this.row = row;
            this.col = col;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            revealCell(row, col);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new MinesweeperGame());
    }
}
